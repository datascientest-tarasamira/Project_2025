---
# Source: wordpress-secure/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: wordpress-orchestration-mysql
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: wordpress-orchestration
      app.kubernetes.io/name: mysql
  ingress:
    # Allow inbound connections
    - ports:
        - port: 3306
      from:
        - podSelector:
            matchLabels:
              wordpress-orchestration-mysql-client: "true"
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: wordpress-orchestration
              app.kubernetes.io/name: mysql
---
# Source: wordpress-secure/templates/mysql-network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mysql-network-policy
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: wordpress-secure
          app.kubernetes.io/instance: wordpress-orchestration
          app.kubernetes.io/version: 6.4
          app.kubernetes.io/managed-by: Helm
    ports:
    - protocol: TCP
      port: 3306
---
# Source: wordpress-secure/templates/wordpress-network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wordpress-network-policy
  namespace: wordpress-staging
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: wordpress-secure
      app.kubernetes.io/instance: wordpress-orchestration
      app.kubernetes.io/version: 6.4
      app.kubernetes.io/managed-by: Helm
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 3306
      namespaceSelector:
        matchLabels:
          name: wordpress-staging
---
# Source: wordpress-secure/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wordpress-orchestration-mysql
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
automountServiceAccountToken: true
secrets:
  - name: mysql-secret
---
# Source: wordpress-secure/templates/image-pull-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ghcr-credentials
  namespace: wordpress-staging
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6IHsiZ2hjci5pbyI6IHsiYXV0aCI6ICJaR0YwWVhOamFXVnVkR1Z6ZEMxMFlYSmhjMkZ0YVhKaE9nPT0ifX19
---
# Source: wordpress-secure/templates/mysql-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  mysql-root-password: "J6KSu91UyR5CrV7FMdyKuXXcV8GD0vkv"
  mysql-password: "21M0uCBykHr93TGJkHnLxbiUd9e0tSYs"
  mysql-database: "my_database"
---
# Source: wordpress-secure/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-orchestration-mysql
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: wordpress-secure/templates/mysql-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 3Gi
---
# Source: wordpress-secure/templates/wordpress-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi
---
# Source: wordpress-secure/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-orchestration-mysql-headless
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: wordpress-secure/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-orchestration-mysql
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: wordpress-secure/templates/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
  clusterIP: None  # Headless service for direct pod access
---
# Source: wordpress-secure/templates/wordpress-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
# Source: wordpress-secure/templates/mysql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: wordpress-secure
      app.kubernetes.io/instance: wordpress-orchestration
      app.kubernetes.io/version: 6.4
      app.kubernetes.io/managed-by: Helm
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: wordpress-secure
        app.kubernetes.io/instance: wordpress-orchestration
        app.kubernetes.io/version: 6.4
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        enabled: true
        fsGroup: 1000
      containers:
      - name: mysql
        image: mysql:8.3.0
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          enabled: true
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-pv
          mountPath: /var/lib/mysql
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 128Mi
        readinessProbe:
          exec:
            command:
            - mysql
            - -uroot
            - -p$(MYSQL_ROOT_PASSWORD)
            - -e
            - SELECT 1
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: mysql-pv
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# Source: wordpress-secure/templates/wordpress-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  namespace: wordpress-staging
  labels:
    app.kubernetes.io/name: wordpress-secure
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/version: 6.4
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: wordpress-secure
      app.kubernetes.io/instance: wordpress-orchestration
      app.kubernetes.io/version: 6.4
      app.kubernetes.io/managed-by: Helm
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: wordpress-secure
        app.kubernetes.io/instance: wordpress-orchestration
        app.kubernetes.io/version: 6.4
        app.kubernetes.io/managed-by: Helm
      annotations:
        container.apparmor.security.beta.kubernetes.io/wordpress: runtime/default
    spec:
      securityContext:
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
      imagePullSecrets:
      - name: ghcr-credentials
      initContainers:
      - name: init-mysql
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup mysql-service; do echo waiting for mysql; sleep 2; done']
        securityContext:
          seccompProfile:
            type: RuntimeDefault
      containers:
      - name: wordpress
        image: ghcr.io/datascientest-tarasamira/project-root-wp:v1.2-secure
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql-service
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          value: "root"
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        ports:
        - containerPort: 80
          name: http
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: wordpress-pv
          mountPath: /var/www/html
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 256Mi
      volumes:
      - name: wordpress-pv
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
# Source: wordpress-secure/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: wordpress-orchestration-mysql
  namespace: "wordpress-staging"
  labels:
    app.kubernetes.io/instance: wordpress-orchestration
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: wordpress-orchestration
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
  serviceName: wordpress-orchestration-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 5b888c575fb6f8760165a4c17c1568726b28c5cdc94476f8cd42cf6950e69057
      labels:
        app.kubernetes.io/instance: wordpress-orchestration
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.0.35
        helm.sh/chart: mysql-9.16.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: wordpress-orchestration-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: wordpress-orchestration
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1000
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.35-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "my_database"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 128Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: wordpress-orchestration-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: wordpress-orchestration
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "3Gi"
        storageClassName: standard
---
# Source: wordpress-secure/templates/wordpress-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: wordpress-staging
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - secure.wp.example.com
    secretName: wordpress-tls
  rules:
  - host: secure.wp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress-service
            port:
              number: 443
